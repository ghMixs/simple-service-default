#!groovy
properties([disableConcurrentBuilds()])

pipeline {
    agent any
    
	environment {
        PROJECT_NAME = "${GIT_URL.tokenize('/.')[-2]}"
        BRANCH = "${GIT_BRANCH.split('/')[1]}"
    }
	
    stages {
        stage('Create temporary docker'){
            steps {
                script {
						def inspectExitCode = sh script: "docker build . -t tmp_${PROJECT_NAME}_${BRANCH} -f build/Dockerfile", returnStatus: true
						if (inspectExitCode == 0)
						{
							echo "Create temporary docker succes..."   
						}
						else {
							error "Create temporary docker failed..."
						}
                       
                }
            }         
        }
		
		stage('Stop Service and Rename Docker'){
            steps {
                script {
                    def stop_service = sh script: "docker stop ${PROJECT_NAME}_${BRANCH}", returnStatus: true
                    if (stop_service == 0)
                    {
                        sh 'docker rm ${PROJECT_NAME}_${BRANCH}'
                    }
                    
                    def remove_container =  sh script: "docker image rm img_${PROJECT_NAME}_${BRANCH}", returnStatus: true
                    sh 'docker image tag tmp_${PROJECT_NAME}_${BRANCH} img_${PROJECT_NAME}_${BRANCH}'
                    sh 'docker rmi tmp_${PROJECT_NAME}_${BRANCH}'
                }
            }
        }
        
        stage('Start docker') {
            steps {
                script {
                    sh 'docker run -p 10.8.0.1:5000:5000 --name ${PROJECT_NAME}_${BRANCH} -d img_${PROJECT_NAME}_${BRANCH}'
                }
            }
        }
    }
	
}
